@using OMS.UI.Areas.Settings.ViewModels
@model RecruitNotificationSettingVM

<div class="modal fade" id="mdlProjectStatusShow" style="">
	<div class="modal-dialog" id="PlaceHolderHere">
	</div>
</div>
<div class="card">
	<div class="card-header">
		<div class="row align-items-center">
			<div class="col">
				<h4 class="card-title">Notification Index</h4>
			</div><!--end col-->
		</div>  <!--end row-->
	</div><!--end card-header-->
	<div class="card-body">
		<form id="RecruitNotificationSettingUpdate">
		<input id="txtRecruitNotificationSettingId" type="hidden" name="Id" value="@Model.Id" />
		<div class="row">
			<h4 style="padding: 0px;">
				Mail Settings
			</h4>
		</div>
		<div class="row">
			<label>Send mail when application status changes to </label>
		</div>
			<div class="row">
				@for (var i = 0; i < Model.CBEMailSettings.Count; i++)
				{
					<div class="col-lg-2">
						<div class="form-check custom-control custom-checkbox mt-4 mb-2">
							<input type="hidden" name="CBEMailSettings[@i].IsChecked" value="false" />
							<input type="checkbox" class="form-check-input form-check-input-custom" id="checkbox-@Model.CBEMailSettings[i].Id" name="CBEMailSettings[@i].IsChecked" value="true" @(Model.CBEMailSettings[i].IsChecked ? "checked" : "") />
							<label class="custom-control-label labelcustom" for="checkbox-@Model.CBEMailSettings[i].Id">@Model.CBEMailSettings[i].Name</label>
							<input type="hidden" name="CBEMailSettings[@i].Id" value="@Model.CBEMailSettings[i].Id" />
							<input type="hidden" name="CBEMailSettings[@i].Name" value="@Model.CBEMailSettings[i].Name" />
						</div>
					</div>
				}
			</div>
			</form>
		<form id="RecruitNotificationSettingUpdate1">
		<div class="row mt-4">
			<h4 style="padding: 0px;">
				Email Notification Settings
			</h4>
		</div>
			<div class="row">
				@for (var i = 0; i < Model.CBEMailNotificationSettings.Count; i++)
				{
					<div class="col-lg-2">
						<div class="form-check custom-control custom-checkbox mt-4 mb-2">
							<input type="hidden" name="CBEMailNotificationSettings[@i].IsChecked" value="false" />
							<input type="checkbox" class="form-check-input form-check-input-custom" id="checkbox-@Model.CBEMailNotificationSettings[i].Id" name="CBEMailNotificationSettings[@i].IsChecked" value="true" @(Model.CBEMailNotificationSettings[i].IsChecked ? "checked" : "") />
							<label class="custom-control-label labelcustom" for="checkbox-@Model.CBEMailNotificationSettings[i].Id">@Model.CBEMailNotificationSettings[i].Name</label>
							<input type="hidden" name="CBEMailNotificationSettings[@i].Id" value="@Model.CBEMailNotificationSettings[i].Id" />
							<input type="hidden" name="CBEMailNotificationSettings[@i].Name" value="@Model.CBEMailNotificationSettings[i].Name" />
						</div>
					</div>
				}
			</div>
	</form>
		<button id="updateRecruitNotificationSetting" type="button" class="btn btn-de-primary mt-4 float-end"><b><i class="mdi mdi-check-all me-2"></i>Update</b></button>

	</div><!--end card-body-->
</div>
<script type="text/javascript">
	$(document).ready(function() {
		$('#updateRecruitNotificationSetting').click(function() {

			const swalWithBootstrapButtons = Swal.mixin({
			  customClass: {
				 confirmButton: "btn btn-de-primary",
				 cancelButton: "btn btn-de-danger me-2"
			  },
			  buttonsStyling: false
		   });


			// var formData = new FormData($('#RecruitNotificationSettingUpdate')[0]);
			// var formData1 = new FormData($('#RecruitNotificationSettingUpdate1')[0]);
			var cbData = $('#RecruitNotificationSettingUpdate').serializeArray();
			// var cbData = $('#RecruitNotificationSettingUpdate').serializeArray().filter(v => v.name !== 'selectedRadio');
				var cbEmailItems = [];
	cbData.forEach(function(field) {
		var indexMatch = field.name.match(/\d+/);
		if (indexMatch) {
			var index = indexMatch[0];
			if (!cbEmailItems[index]) {
				cbEmailItems[index] = { Id: 0, Name: "", IsChecked: false };
			}
			if (field.name.includes("IsChecked")) {
				cbEmailItems[index].IsChecked = field.value === "true";
			} else if (field.name.includes("Id")) {
				cbEmailItems[index].Id = parseInt(field.value);
			} else if (field.name.includes("Name")) {
				cbEmailItems[index].Name = field.value;
			}
		}
	});
	cbEmailItems = cbEmailItems.filter(item => item != null);
	var cbEmailjsonData = JSON.stringify(cbEmailItems);

			var cbData1 = $('#RecruitNotificationSettingUpdate1').serializeArray();

	var cbEmailNotfnItems = [];
	cbData1.forEach(function(field) {
		var indexMatch = field.name.match(/\d+/);
		if (indexMatch) {
			var index = indexMatch[0];
			if (!cbEmailNotfnItems[index]) {
				cbEmailNotfnItems[index] = { Id: 0, Name: "", IsChecked: false };
			}
			if (field.name.includes("IsChecked")) {
				cbEmailNotfnItems[index].IsChecked = field.value === "true";
			} else if (field.name.includes("Id")) {
				cbEmailNotfnItems[index].Id = parseInt(field.value);
			} else if (field.name.includes("Name")) {
				cbEmailNotfnItems[index].Name = field.value;
			}
		}
	});
	cbEmailNotfnItems = cbEmailNotfnItems.filter(item => item != null);
	var cbEmailNotfnjsonData = JSON.stringify(cbEmailNotfnItems);

			// formData.append('emailJsonData', cbEmailjsonData);
			// formData.append('emailNotfnJsonData', cbEmailNotfnjsonData);
			// var sendData = form.serialize();

			// var selectedRadio = $('input[name="selectedRadio"]:checked').val();
			// var items2 = [];
			// $('#checkboxForm input[type="radio"]').each(function() {
			// 	var id = $(this).val();
			// 	var name = $(this).next('label').text();
			// 	var isSelected = $(this).is(':checked');
			// 	items2.push({ Id: id, Name: name, IsSelected: isSelected }); });
			// 	var jsonData2 = JSON.stringify(items2);


			$.ajax({
				url: '@Url.Action("RecruitNotificationSettingUpdate", "Recruit")',
				type: 'POST',
				data: {emailJsonData: cbEmailjsonData, emailNotfnJsonData: cbEmailNotfnjsonData},
				// processData: false,
				// contentType: false,
				success: function(response) {
					swalWithBootstrapButtons.fire({ title: "Updated!",
		 text: "Updated successfully!",
		 icon: "success",
			  allowOutsideClick: false}).then(okay => {
		   if (okay) {
			location.reload();
		  }
		});
				}
			});
		});
	});
</script>